import React from "react";
import styled from "@emotion/styled";
/**
 * `<SectionHero>` ('section-hero')
 * - [Open in Figma](https://figma.com/file/Gaznaw1QHppxvs9UkqNOb0?node-id=8266:64059)
 * - [Open in Grida](https://code.grida.co/files/Gaznaw1QHppxvs9UkqNOb0?node=8266:64059)
 *
 *
 * ---
 * @example
 * ```tsx
 * import React from "react";
 *
 * export default function () {
 *   return (
 *     <>
 *       ðŸ‘‡ instanciate widget like below. ðŸ‘‡
 *       <SectionHero/>
 *     </>
 *   )
 * }
 * ```
 * ---
 * @params {any} props - this widget does not requires props. you can pass custom dynamic props to the widget as you want (on typescript, it will raise type check issues).
 * ---
 * @preview
 * ![](https://figma-alpha-api.s3.us-west-2.amazonaws.com/images/ad48d25f-e08f-4efe-abac-c93ffe5cc887)
 * ---
 * @remarks
 * @see {@link https://grida.co/docs} for more information.
 * ---
 * Code generated by grida.co | engine 0.0.1 (Apache-2.0) | Generated code under CC0 (public domain) *This code is free to use, modify, and redistribute. (aknowledgment is not required)*
 *
 *
 * ![Made with Grida](https://bridged-service-static.s3.us-west-1.amazonaws.com/branding/logo/32.png)
 * <!-- Info: Please do not remove this comment unless intended. removing this section will break grida integrations. -->
 * <!-- grida.meta.widget_declaration | engine : 0.0.1 | source : figma://Gaznaw1QHppxvs9UkqNOb0/8266:64059 -->
 */
export function SectionHero({
  onCopyClick,
  onStartClick,
  copyText = "npx grida init",
}: {
  onCopyClick?: (text: string) => void;
  onStartClick?: () => void;
  copyText?: string;
}) {
  return (
    <RootWrapperSectionHero>
      <HeaderContainer>
        <HeaderWithBadge>
          <BadgeContainer>
            <BadgeLabel>_ Grida CLI // Beta</BadgeLabel>
          </BadgeContainer>
          <Frame508>
            <HeadingAsH1>CI</HeadingAsH1>
            <HeadingAsH1_0001>your design.</HeadingAsH1_0001>
          </Frame508>
        </HeaderWithBadge>
        <DescriptionAsP>
          Grida CLI generate code from Design input and saves directly into
          <br />
          your workspace. Use your design like a package.
        </DescriptionAsP>
      </HeaderContainer>
      <CtaArea>
        <CopyAsButton onClick={() => onCopyClick?.("npx grida init")}>
          {copyText}
        </CopyAsButton>
        <StartAsButton onClick={onStartClick}>Start Coding</StartAsButton>
      </CtaArea>
    </RootWrapperSectionHero>
  );
}

const RootWrapperSectionHero = styled.div`
  display: flex;
  justify-content: center;
  flex-direction: column;
  align-items: center;
  gap: 90px;
  border-top-left-radius: 0px;
  border-top-right-radius: 0px;
  border-bottom-right-radius: 0px;
  border-bottom-left-radius: 0px;
  min-height: 100vh;
  background-color: white;
  box-sizing: border-box;
`;

const HeaderContainer = styled.div`
  display: flex;
  justify-content: flex-start;
  flex-direction: column;
  align-items: center;
  flex: none;
  gap: 32px;
  border-top-left-radius: 0px;
  border-top-right-radius: 0px;
  border-bottom-right-radius: 0px;
  border-bottom-left-radius: 0px;
  box-sizing: border-box;
`;

const HeaderWithBadge = styled.div`
  display: flex;
  justify-content: flex-start;
  flex-direction: column;
  align-items: center;
  flex: none;
  gap: 16px;
  border-top-left-radius: 0px;
  border-top-right-radius: 0px;
  border-bottom-right-radius: 0px;
  border-bottom-left-radius: 0px;
  box-sizing: border-box;
`;

const BadgeContainer = styled.div`
  display: flex;
  justify-content: flex-start;
  flex-direction: row;
  align-items: flex-start;
  flex: none;
  border-top-left-radius: 0px;
  border-top-right-radius: 0px;
  border-bottom-right-radius: 0px;
  border-bottom-left-radius: 0px;
  background-color: black;
  box-sizing: border-box;
  padding: 0px 4px;
`;

const BadgeLabel = styled.span`
  color: white;
  text-overflow: ellipsis;
  font-size: 12px;
  font-family: "Roboto Mono", sans-serif;
  font-weight: 400;
  line-height: 167%;
  text-align: left;
`;

const Frame508 = styled.div`
  display: flex;
  justify-content: center;
  flex-direction: row;
  align-items: center;
  flex: none;
  gap: 24px;
  border-top-left-radius: 0px;
  border-top-right-radius: 0px;
  border-bottom-right-radius: 0px;
  border-bottom-left-radius: 0px;
  box-sizing: border-box;
`;

const HeadingAsH1 = styled.h1`
  color: black;
  text-overflow: ellipsis;
  font-size: 74px;
  font-family: "Roboto Mono", sans-serif;
  font-weight: 700;
  letter-spacing: -1px;
  line-height: 95%;
  text-align: left;
`;

const HeadingAsH1_0001 = styled.h1`
  color: black;
  text-overflow: ellipsis;
  font-size: 74px;
  font-family: "Helvetica Neue", sans-serif;
  font-weight: 700;
  letter-spacing: -1px;
  text-align: left;
`;

const DescriptionAsP = styled.p`
  color: rgba(0, 0, 0, 0.6);
  text-overflow: ellipsis;
  font-size: 16px;
  font-family: "Helvetica Neue", sans-serif;
  font-weight: 400;
  line-height: 167%;
  text-align: center;
  align-self: stretch;
  flex-shrink: 0;
`;

const CtaArea = styled.div`
  display: flex;
  justify-content: center;
  flex-direction: row;
  align-items: flex-start;
  flex: none;
  gap: 16px;
  border-top-left-radius: 0px;
  border-top-right-radius: 0px;
  border-bottom-right-radius: 0px;
  border-bottom-left-radius: 0px;
  box-sizing: border-box;
`;

const CopyAsButton = styled.button`
  background-color: rgba(0, 0, 0, 0.02);
  border: solid 1px rgba(0, 0, 0, 0.04);
  border-radius: 4px;
  padding: 10px 16px;
  color: rgba(0, 0, 0, 0.8);
  font-size: 18px;
  font-family: "Roboto Mono", sans-serif;
  font-weight: 400;
  outline: none;
  cursor: pointer;

  :hover {
    opacity: 0.8;
  }

  :disabled {
    opacity: 0.5;
  }

  :active {
    opacity: 1;
  }

  :focus {
  }
`;

const StartAsButton = styled.button`
  background-color: rgba(0, 0, 0, 0.9);
  border-radius: 4px;
  padding: 10px 16px;
  color: white;
  font-size: 18px;
  font-family: "Roboto Mono", sans-serif;
  font-weight: 500;
  border: none;
  outline: none;
  cursor: pointer;

  :hover {
    opacity: 0.8;
  }

  :disabled {
    opacity: 0.5;
  }

  :active {
    opacity: 1;
  }

  :focus {
  }
`;
